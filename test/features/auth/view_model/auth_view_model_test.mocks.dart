// Mocks generated by Mockito 5.4.4 from annotations
// in telware_cross_platform/test/features/auth/view_model/auth_view_model_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dio/dio.dart' as _i10;
import 'package:fpdart/fpdart.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i8;
import 'package:telware_cross_platform/core/models/app_error.dart' as _i2;
import 'package:telware_cross_platform/core/models/user_model.dart' as _i5;
import 'package:telware_cross_platform/features/auth/models/auth_response_model.dart'
    as _i9;
import 'package:telware_cross_platform/features/auth/repository/auth_local_repository.dart'
    as _i3;
import 'package:telware_cross_platform/features/auth/repository/auth_remote_repository.dart'
    as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAppError_0 extends _i1.SmartFake implements _i2.AppError {
  _FakeAppError_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AuthLocalRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthLocalRepository extends _i1.Mock
    implements _i3.AuthLocalRepository {
  MockAuthLocalRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> setToken(String? token) => (super.noSuchMethod(
        Invocation.method(
          #setToken,
          [token],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> deleteToken() => (super.noSuchMethod(
        Invocation.method(
          #deleteToken,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> setUser(_i5.UserModel? user) => (super.noSuchMethod(
        Invocation.method(
          #setUser,
          [user],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> deleteUser() => (super.noSuchMethod(
        Invocation.method(
          #deleteUser,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [AuthRemoteRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRemoteRepository extends _i1.Mock
    implements _i6.AuthRemoteRepository {
  MockAuthRemoteRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.AppError?> signUp({
    required String? email,
    required String? phone,
    required String? password,
    required String? confirmPassword,
    required String? reCaptchaResponse,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #signUp,
          [],
          {
            #email: email,
            #phone: phone,
            #password: password,
            #confirmPassword: confirmPassword,
            #reCaptchaResponse: reCaptchaResponse,
          },
        ),
        returnValue: _i4.Future<_i2.AppError?>.value(),
      ) as _i4.Future<_i2.AppError?>);

  @override
  _i4.Future<_i2.AppError?> verifyEmail({
    required String? email,
    required String? code,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #verifyEmail,
          [],
          {
            #email: email,
            #code: code,
          },
        ),
        returnValue: _i4.Future<_i2.AppError?>.value(),
      ) as _i4.Future<_i2.AppError?>);

  @override
  _i4.Future<_i2.AppError?> sendConfirmationCode({required String? email}) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendConfirmationCode,
          [],
          {#email: email},
        ),
        returnValue: _i4.Future<_i2.AppError?>.value(),
      ) as _i4.Future<_i2.AppError?>);

  @override
  _i4.Future<_i7.Either<_i2.AppError, _i5.UserModel>> getMe(
          String? sessionId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMe,
          [sessionId],
        ),
        returnValue: _i4.Future<_i7.Either<_i2.AppError, _i5.UserModel>>.value(
            _i8.dummyValue<_i7.Either<_i2.AppError, _i5.UserModel>>(
          this,
          Invocation.method(
            #getMe,
            [sessionId],
          ),
        )),
      ) as _i4.Future<_i7.Either<_i2.AppError, _i5.UserModel>>);

  @override
  _i4.Future<_i7.Either<_i2.AppError, _i9.AuthResponseModel>> logIn({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #logIn,
          [],
          {
            #email: email,
            #password: password,
          },
        ),
        returnValue:
            _i4.Future<_i7.Either<_i2.AppError, _i9.AuthResponseModel>>.value(
                _i8.dummyValue<_i7.Either<_i2.AppError, _i9.AuthResponseModel>>(
          this,
          Invocation.method(
            #logIn,
            [],
            {
              #email: email,
              #password: password,
            },
          ),
        )),
      ) as _i4.Future<_i7.Either<_i2.AppError, _i9.AuthResponseModel>>);

  @override
  _i4.Future<_i2.AppError?> logOut({
    required String? token,
    required String? route,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #logOut,
          [],
          {
            #token: token,
            #route: route,
          },
        ),
        returnValue: _i4.Future<_i2.AppError?>.value(),
      ) as _i4.Future<_i2.AppError?>);

  @override
  _i4.Future<_i2.AppError?> forgotPassword(String? email) =>
      (super.noSuchMethod(
        Invocation.method(
          #forgotPassword,
          [email],
        ),
        returnValue: _i4.Future<_i2.AppError?>.value(),
      ) as _i4.Future<_i2.AppError?>);

  @override
  _i4.Future<_i7.Either<_i2.AppError, List<_i5.UserModel>>> getBlockedUsers(
          String? sessionId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getBlockedUsers,
          [sessionId],
        ),
        returnValue:
            _i4.Future<_i7.Either<_i2.AppError, List<_i5.UserModel>>>.value(
                _i8.dummyValue<_i7.Either<_i2.AppError, List<_i5.UserModel>>>(
          this,
          Invocation.method(
            #getBlockedUsers,
            [sessionId],
          ),
        )),
      ) as _i4.Future<_i7.Either<_i2.AppError, List<_i5.UserModel>>>);

  @override
  _i2.AppError handleDioException(_i10.DioException? dioException) =>
      (super.noSuchMethod(
        Invocation.method(
          #handleDioException,
          [dioException],
        ),
        returnValue: _FakeAppError_0(
          this,
          Invocation.method(
            #handleDioException,
            [dioException],
          ),
        ),
      ) as _i2.AppError);
}
